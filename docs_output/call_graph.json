{
    "1_profile_page::(global)": {
        "uid": "node_39d72ff3",
        "name": "1_profile_page::(global)",
        "content": "",
        "callers": [],
        "callees": [
            "EXTERNAL::list",
            "EXTERNAL::streamlit.get",
            "EXTERNAL::streamlit.selectbox",
            "EXTERNAL::streamlit.set_page_config",
            "EXTERNAL::streamlit.success",
            "EXTERNAL::streamlit.text_input",
            "EXTERNAL::streamlit.title"
        ],
        "file_name": "/workspace/pages/1_profile_page.py"
    },
    "2_mail_reader::(global)": {
        "uid": "node_de95b3df",
        "name": "2_mail_reader::(global)",
        "content": "",
        "callers": [],
        "callees": [
            "2_mail_reader::add_email",
            "2_mail_reader::get_all_emails",
            "2_mail_reader::reset_email",
            "2_mail_reader::write_emails",
            "EXTERNAL::<Call owner_token=conn token=cursor>.execute",
            "EXTERNAL::<Call owner_token=sqlite3 token=connect>.commit",
            "EXTERNAL::<Call owner_token=sqlite3 token=connect>.cursor",
            "EXTERNAL::sqlite3.connect",
            "EXTERNAL::streamlit.columns",
            "EXTERNAL::streamlit.markdown",
            "EXTERNAL::streamlit.subheader",
            "EXTERNAL::streamlit.success",
            "EXTERNAL::streamlit.success",
            "EXTERNAL::streamlit.success",
            "EXTERNAL::streamlit.text_input",
            "EXTERNAL::streamlit.text_input",
            "EXTERNAL::streamlit.title",
            "EXTERNAL::streamlit.write",
            "EXTERNAL::streamlit.write",
            "EXTERNAL::streamlit.write",
            "EXTERNAL::streamlit.write",
            "EXTERNAL::streamlit.write",
            "EXTERNAL::streamlit.write",
            "EXTERNAL::subprocess.Popen"
        ],
        "file_name": "/workspace/pages/2_mail_reader.py"
    },
    "2_mail_reader::add_email": {
        "uid": "node_e455d559",
        "name": "2_mail_reader::add_email",
        "content": "\n\ndef add_email(name, email):\n    try:\n        cursor.execute('INSERT INTO emails (name, email) VALUES (?, ?)', (name, email))\n        conn.commit()\n        return True\n    except sqlite3.IntegrityError:\n        return False\n",
        "callers": [
            "2_mail_reader::(global)"
        ],
        "callees": [
            "EXTERNAL::<Call owner_token=conn token=cursor>.execute",
            "EXTERNAL::<Call owner_token=sqlite3 token=connect>.commit"
        ],
        "file_name": "/workspace/pages/2_mail_reader.py"
    },
    "2_mail_reader::get_all_emails": {
        "uid": "node_953315de",
        "name": "2_mail_reader::get_all_emails",
        "content": "\n\ndef get_all_emails():\n    cursor.execute('SELECT * FROM emails')\n    return cursor.fetchall()\n",
        "callers": [
            "2_mail_reader::(global)",
            "2_mail_reader::write_emails"
        ],
        "callees": [
            "EXTERNAL::<Call owner_token=conn token=cursor>.execute",
            "EXTERNAL::<Call owner_token=conn token=cursor>.fetchall"
        ],
        "file_name": "/workspace/pages/2_mail_reader.py"
    },
    "2_mail_reader::reset_email": {
        "uid": "node_cb3d99ca",
        "name": "2_mail_reader::reset_email",
        "content": "\n\ndef reset_email():\n    try:\n        cursor.execute('DELETE FROM emails')\n        conn.commit()\n        return True\n    except sqlite3.IntegrityError:\n        return False\n",
        "callers": [
            "2_mail_reader::(global)"
        ],
        "callees": [
            "EXTERNAL::<Call owner_token=conn token=cursor>.execute",
            "EXTERNAL::<Call owner_token=sqlite3 token=connect>.commit"
        ],
        "file_name": "/workspace/pages/2_mail_reader.py"
    },
    "2_mail_reader::write_emails": {
        "uid": "node_9c359e13",
        "name": "2_mail_reader::write_emails",
        "content": "\n\ndef write_emails():\n    mail_list = get_all_emails()\n    with open('email_list.json', 'w') as f:\n        json.dump(mail_list, f)\n",
        "callers": [
            "2_mail_reader::(global)"
        ],
        "callees": [
            "2_mail_reader::get_all_emails",
            "EXTERNAL::json.dump",
            "EXTERNAL::open"
        ],
        "file_name": "/workspace/pages/2_mail_reader.py"
    },
    "EXTERNAL::<Call owner_token=None token=Client>.create": {
        "uid": "external_<Call owner_token=None token=Client>_create",
        "name": "EXTERNAL::<Call owner_token=None token=Client>.create",
        "content": "",
        "callers": [
            "monitor::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::<Call owner_token=None token=OpenAIEmbedding>.get_output_dim": {
        "uid": "external_<Call owner_token=None token=OpenAIEmbedding>_get_output_dim",
        "name": "EXTERNAL::<Call owner_token=None token=OpenAIEmbedding>.get_output_dim",
        "content": "",
        "callers": [
            "repo_scanner::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::<Call owner_token=None token=RepoAgent>.count_tokens": {
        "uid": "external_<Call owner_token=None token=RepoAgent>_count_tokens",
        "name": "EXTERNAL::<Call owner_token=None token=RepoAgent>.count_tokens",
        "content": "",
        "callers": [
            "repo_scanner::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::<Call owner_token=None token=RepoAgent>.load_repositories": {
        "uid": "external_<Call owner_token=None token=RepoAgent>_load_repositories",
        "name": "EXTERNAL::<Call owner_token=None token=RepoAgent>.load_repositories",
        "content": "",
        "callers": [
            "repo_scanner::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::<Call owner_token=None token=RepoAgent>.step": {
        "uid": "external_<Call owner_token=None token=RepoAgent>_step",
        "name": "EXTERNAL::<Call owner_token=None token=RepoAgent>.step",
        "content": "",
        "callers": [
            "repo_scanner::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::<Call owner_token=conn token=cursor>.execute": {
        "uid": "external_<Call owner_token=conn token=cursor>_execute",
        "name": "EXTERNAL::<Call owner_token=conn token=cursor>.execute",
        "content": "",
        "callers": [
            "2_mail_reader::(global)",
            "2_mail_reader::add_email",
            "2_mail_reader::get_all_emails",
            "2_mail_reader::reset_email"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::<Call owner_token=conn token=cursor>.fetchall": {
        "uid": "external_<Call owner_token=conn token=cursor>_fetchall",
        "name": "EXTERNAL::<Call owner_token=conn token=cursor>.fetchall",
        "content": "",
        "callers": [
            "2_mail_reader::get_all_emails"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::<Call owner_token=sqlite3 token=connect>.commit": {
        "uid": "external_<Call owner_token=sqlite3 token=connect>_commit",
        "name": "EXTERNAL::<Call owner_token=sqlite3 token=connect>.commit",
        "content": "",
        "callers": [
            "2_mail_reader::(global)",
            "2_mail_reader::add_email",
            "2_mail_reader::reset_email"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::<Call owner_token=sqlite3 token=connect>.cursor": {
        "uid": "external_<Call owner_token=sqlite3 token=connect>_cursor",
        "name": "EXTERNAL::<Call owner_token=sqlite3 token=connect>.cursor",
        "content": "",
        "callers": [
            "2_mail_reader::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::agent_supervisor.supervisor.invoke": {
        "uid": "external_agent_supervisor_supervisor_invoke",
        "name": "EXTERNAL::agent_supervisor.supervisor.invoke",
        "content": "",
        "callers": [
            "chat_bot::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::camel.agents.repo_agent.RepoAgent": {
        "uid": "external_camel_agents_repo_agent_RepoAgent",
        "name": "EXTERNAL::camel.agents.repo_agent.RepoAgent",
        "content": "",
        "callers": [
            "repo_scanner::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::camel.embeddings.OpenAIEmbedding": {
        "uid": "external_camel_embeddings_OpenAIEmbedding",
        "name": "EXTERNAL::camel.embeddings.OpenAIEmbedding",
        "content": "",
        "callers": [
            "repo_scanner::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::camel.models.ModelFactory.create": {
        "uid": "external_camel_models_ModelFactory_create",
        "name": "EXTERNAL::camel.models.ModelFactory.create",
        "content": "",
        "callers": [
            "repo_scanner::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::camel.retrievers.VectorRetriever": {
        "uid": "external_camel_retrievers_VectorRetriever",
        "name": "EXTERNAL::camel.retrievers.VectorRetriever",
        "content": "",
        "callers": [
            "repo_scanner::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::camel.storages.vectordb_storages.QdrantStorage": {
        "uid": "external_camel_storages_vectordb_storages_QdrantStorage",
        "name": "EXTERNAL::camel.storages.vectordb_storages.QdrantStorage",
        "content": "",
        "callers": [
            "repo_scanner::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::datetime.datetime.now": {
        "uid": "external_datetime_datetime_now",
        "name": "EXTERNAL::datetime.datetime.now",
        "content": "",
        "callers": [
            "log_status::update_txt_status",
            "mail_reader::get_recent_emails",
            "save_txt::save_to_txt",
            "time_tool::get_current_datetime"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::datetime.now": {
        "uid": "external_datetime_now",
        "name": "EXTERNAL::datetime.now",
        "content": "",
        "callers": [
            "mail_saver::fetch_and_log_emails",
            "mail_saver::log_to_file"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::datetime.timedelta": {
        "uid": "external_datetime_timedelta",
        "name": "EXTERNAL::datetime.timedelta",
        "content": "",
        "callers": [
            "mail_saver::fetch_and_log_emails"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::dateutil.parser.parse": {
        "uid": "external_dateutil_parser_parse",
        "name": "EXTERNAL::dateutil.parser.parse",
        "content": "",
        "callers": [
            "mail_reader::get_recent_emails"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::dotenv.load_dotenv": {
        "uid": "external_dotenv_load_dotenv",
        "name": "EXTERNAL::dotenv.load_dotenv",
        "content": "",
        "callers": [
            "agent_supervisor::(global)",
            "mail_saver::(global)",
            "monitor::(global)",
            "repo_scanner::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::email.header.decode_header": {
        "uid": "external_email_header_decode_header",
        "name": "EXTERNAL::email.header.decode_header",
        "content": "",
        "callers": [
            "mail_saver::fetch_and_log_emails"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::email.message_from_bytes": {
        "uid": "external_email_message_from_bytes",
        "name": "EXTERNAL::email.message_from_bytes",
        "content": "",
        "callers": [
            "mail_saver::fetch_and_log_emails",
            "monitor::fetch_unread_from_senders"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::email.parseaddr": {
        "uid": "external_email_parseaddr",
        "name": "EXTERNAL::email.parseaddr",
        "content": "",
        "callers": [
            "monitor::fetch_unread_from_senders"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::enumerate": {
        "uid": "external_enumerate",
        "name": "EXTERNAL::enumerate",
        "content": "",
        "callers": [
            "mail_reader::get_recent_emails"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::float": {
        "uid": "external_float",
        "name": "EXTERNAL::float",
        "content": "",
        "callers": [
            "timer::set_timer"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::imaplib.IMAP4_SSL": {
        "uid": "external_imaplib_IMAP4_SSL",
        "name": "EXTERNAL::imaplib.IMAP4_SSL",
        "content": "",
        "callers": [
            "mail_saver::fetch_and_log_emails",
            "monitor::fetch_unread_from_senders"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::int": {
        "uid": "external_int",
        "name": "EXTERNAL::int",
        "content": "",
        "callers": [
            "mail_reader::get_recent_emails",
            "mail_saver::fetch_and_log_emails",
            "timer::set_timer"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::isinstance": {
        "uid": "external_isinstance",
        "name": "EXTERNAL::isinstance",
        "content": "",
        "callers": [
            "mail_saver::fetch_and_log_emails"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::json.dump": {
        "uid": "external_json_dump",
        "name": "EXTERNAL::json.dump",
        "content": "",
        "callers": [
            "2_mail_reader::write_emails"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::json.load": {
        "uid": "external_json_load",
        "name": "EXTERNAL::json.load",
        "content": "",
        "callers": [
            "monitor::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::langchain.schema.HumanMessage": {
        "uid": "external_langchain_schema_HumanMessage",
        "name": "EXTERNAL::langchain.schema.HumanMessage",
        "content": "",
        "callers": [
            "chat_bot::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::langchain.tools.Tool": {
        "uid": "external_langchain_tools_Tool",
        "name": "EXTERNAL::langchain.tools.Tool",
        "content": "",
        "callers": [
            "search_tools::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::langchain_community.tools.ArxivQueryRun": {
        "uid": "external_langchain_community_tools_ArxivQueryRun",
        "name": "EXTERNAL::langchain_community.tools.ArxivQueryRun",
        "content": "",
        "callers": [
            "search_tools::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::langchain_community.tools.DuckDuckGoSearchRun": {
        "uid": "external_langchain_community_tools_DuckDuckGoSearchRun",
        "name": "EXTERNAL::langchain_community.tools.DuckDuckGoSearchRun",
        "content": "",
        "callers": [
            "search_tools::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::langchain_community.tools.WikipediaQueryRun": {
        "uid": "external_langchain_community_tools_WikipediaQueryRun",
        "name": "EXTERNAL::langchain_community.tools.WikipediaQueryRun",
        "content": "",
        "callers": [
            "search_tools::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::langchain_community.utilities.ArxivAPIWrapper": {
        "uid": "external_langchain_community_utilities_ArxivAPIWrapper",
        "name": "EXTERNAL::langchain_community.utilities.ArxivAPIWrapper",
        "content": "",
        "callers": [
            "search_tools::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::langchain_community.utilities.WikipediaAPIWrapper": {
        "uid": "external_langchain_community_utilities_WikipediaAPIWrapper",
        "name": "EXTERNAL::langchain_community.utilities.WikipediaAPIWrapper",
        "content": "",
        "callers": [
            "search_tools::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::langchain_core.tools.Tool": {
        "uid": "external_langchain_core_tools_Tool",
        "name": "EXTERNAL::langchain_core.tools.Tool",
        "content": "",
        "callers": [
            "log_status::(global)",
            "mail_reader::(global)",
            "mail_saver::(global)",
            "save_txt::(global)",
            "time_tool::(global)",
            "timer::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::langchain_openai.ChatOpenAI": {
        "uid": "external_langchain_openai_ChatOpenAI",
        "name": "EXTERNAL::langchain_openai.ChatOpenAI",
        "content": "",
        "callers": [
            "agent_supervisor::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::langgraph.checkpoint.memory.MemorySaver": {
        "uid": "external_langgraph_checkpoint_memory_MemorySaver",
        "name": "EXTERNAL::langgraph.checkpoint.memory.MemorySaver",
        "content": "",
        "callers": [
            "agent_supervisor::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::langgraph.prebuilt.create_react_agent": {
        "uid": "external_langgraph_prebuilt_create_react_agent",
        "name": "EXTERNAL::langgraph.prebuilt.create_react_agent",
        "content": "",
        "callers": [
            "agent_supervisor::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::langgraph_supervisor.create_supervisor": {
        "uid": "external_langgraph_supervisor_create_supervisor",
        "name": "EXTERNAL::langgraph_supervisor.create_supervisor",
        "content": "",
        "callers": [
            "agent_supervisor::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::len": {
        "uid": "external_len",
        "name": "EXTERNAL::len",
        "content": "",
        "callers": [
            "mail_reader::get_recent_emails",
            "mail_saver::fetch_and_log_emails"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::list": {
        "uid": "external_list",
        "name": "EXTERNAL::list",
        "content": "",
        "callers": [
            "1_profile_page::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::open": {
        "uid": "external_open",
        "name": "EXTERNAL::open",
        "content": "",
        "callers": [
            "2_mail_reader::write_emails",
            "log_status::update_txt_status",
            "mail_reader::parse_mail_log",
            "mail_saver::fetch_and_log_emails",
            "mail_saver::log_to_file",
            "save_txt::save_to_txt"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::os.dirname": {
        "uid": "external_os_dirname",
        "name": "EXTERNAL::os.dirname",
        "content": "",
        "callers": [
            "repo_scanner::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::os.getenv": {
        "uid": "external_os_getenv",
        "name": "EXTERNAL::os.getenv",
        "content": "",
        "callers": [
            "mail_saver::fetch_and_log_emails",
            "monitor::(global)",
            "repo_scanner::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::os.join": {
        "uid": "external_os_join",
        "name": "EXTERNAL::os.join",
        "content": "",
        "callers": [
            "repo_scanner::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::plyer.notification.notify": {
        "uid": "external_plyer_notification_notify",
        "name": "EXTERNAL::plyer.notification.notify",
        "content": "",
        "callers": [
            "timer::timer_thread"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::print": {
        "uid": "external_print",
        "name": "EXTERNAL::print",
        "content": "",
        "callers": [
            "file2::summarize_repo",
            "file::print_repoagent_summary",
            "monitor::(global)",
            "monitor::fetch_unread_from_senders",
            "repo_scanner::(global)",
            "time_tool::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::pytz.timezone": {
        "uid": "external_pytz_timezone",
        "name": "EXTERNAL::pytz.timezone",
        "content": "",
        "callers": [
            "time_tool::get_current_datetime"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::re.search": {
        "uid": "external_re_search",
        "name": "EXTERNAL::re.search",
        "content": "",
        "callers": [
            "mail_reader::get_recent_emails",
            "mail_saver::fetch_and_log_emails",
            "timer::set_timer"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::set": {
        "uid": "external_set",
        "name": "EXTERNAL::set",
        "content": "",
        "callers": [
            "monitor::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::sqlite3.connect": {
        "uid": "external_sqlite3_connect",
        "name": "EXTERNAL::sqlite3.connect",
        "content": "",
        "callers": [
            "2_mail_reader::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::str": {
        "uid": "external_str",
        "name": "EXTERNAL::str",
        "content": "",
        "callers": [
            "log_status::update_txt_status",
            "mail_saver::fetch_and_log_emails",
            "time_tool::get_current_datetime"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::streamlit.append": {
        "uid": "external_streamlit_append",
        "name": "EXTERNAL::streamlit.append",
        "content": "",
        "callers": [
            "chat_bot::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::streamlit.columns": {
        "uid": "external_streamlit_columns",
        "name": "EXTERNAL::streamlit.columns",
        "content": "",
        "callers": [
            "2_mail_reader::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::streamlit.get": {
        "uid": "external_streamlit_get",
        "name": "EXTERNAL::streamlit.get",
        "content": "",
        "callers": [
            "1_profile_page::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::streamlit.image": {
        "uid": "external_streamlit_image",
        "name": "EXTERNAL::streamlit.image",
        "content": "",
        "callers": [
            "chat_bot::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::streamlit.info": {
        "uid": "external_streamlit_info",
        "name": "EXTERNAL::streamlit.info",
        "content": "",
        "callers": [
            "chat_bot::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::streamlit.markdown": {
        "uid": "external_streamlit_markdown",
        "name": "EXTERNAL::streamlit.markdown",
        "content": "",
        "callers": [
            "2_mail_reader::(global)",
            "chat_bot::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::streamlit.selectbox": {
        "uid": "external_streamlit_selectbox",
        "name": "EXTERNAL::streamlit.selectbox",
        "content": "",
        "callers": [
            "1_profile_page::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::streamlit.set_page_config": {
        "uid": "external_streamlit_set_page_config",
        "name": "EXTERNAL::streamlit.set_page_config",
        "content": "",
        "callers": [
            "1_profile_page::(global)",
            "chat_bot::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::streamlit.subheader": {
        "uid": "external_streamlit_subheader",
        "name": "EXTERNAL::streamlit.subheader",
        "content": "",
        "callers": [
            "2_mail_reader::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::streamlit.success": {
        "uid": "external_streamlit_success",
        "name": "EXTERNAL::streamlit.success",
        "content": "",
        "callers": [
            "1_profile_page::(global)",
            "2_mail_reader::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::streamlit.text_input": {
        "uid": "external_streamlit_text_input",
        "name": "EXTERNAL::streamlit.text_input",
        "content": "",
        "callers": [
            "1_profile_page::(global)",
            "2_mail_reader::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::streamlit.title": {
        "uid": "external_streamlit_title",
        "name": "EXTERNAL::streamlit.title",
        "content": "",
        "callers": [
            "1_profile_page::(global)",
            "2_mail_reader::(global)",
            "chat_bot::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::streamlit.write": {
        "uid": "external_streamlit_write",
        "name": "EXTERNAL::streamlit.write",
        "content": "",
        "callers": [
            "2_mail_reader::(global)",
            "chat_bot::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::subprocess.Popen": {
        "uid": "external_subprocess_Popen",
        "name": "EXTERNAL::subprocess.Popen",
        "content": "",
        "callers": [
            "2_mail_reader::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::threading.Thread": {
        "uid": "external_threading_Thread",
        "name": "EXTERNAL::threading.Thread",
        "content": "",
        "callers": [
            "timer::set_timer"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::time.sleep": {
        "uid": "external_time_sleep",
        "name": "EXTERNAL::time.sleep",
        "content": "",
        "callers": [
            "monitor::(global)",
            "timer::timer_thread"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::twilio.rest.Client": {
        "uid": "external_twilio_rest_Client",
        "name": "EXTERNAL::twilio.rest.Client",
        "content": "",
        "callers": [
            "monitor::(global)"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "EXTERNAL::tzlocal.get_localzone": {
        "uid": "external_tzlocal_get_localzone",
        "name": "EXTERNAL::tzlocal.get_localzone",
        "content": "",
        "callers": [
            "time_tool::get_current_datetime"
        ],
        "callees": [],
        "file_name": "EXTERNAL"
    },
    "agent_supervisor::(global)": {
        "uid": "node_7a6e0d2f",
        "name": "agent_supervisor::(global)",
        "content": "",
        "callers": [],
        "callees": [
            "EXTERNAL::dotenv.load_dotenv",
            "EXTERNAL::langchain_openai.ChatOpenAI",
            "EXTERNAL::langgraph.checkpoint.memory.MemorySaver",
            "EXTERNAL::langgraph.prebuilt.create_react_agent",
            "EXTERNAL::langgraph.prebuilt.create_react_agent",
            "EXTERNAL::langgraph.prebuilt.create_react_agent",
            "EXTERNAL::langgraph.prebuilt.create_react_agent",
            "EXTERNAL::langgraph.prebuilt.create_react_agent",
            "EXTERNAL::langgraph.prebuilt.create_react_agent",
            "EXTERNAL::langgraph_supervisor.create_supervisor"
        ],
        "file_name": "/workspace/agent_supervisor.py"
    },
    "chat_bot::(global)": {
        "uid": "node_03e8415c",
        "name": "chat_bot::(global)",
        "content": "",
        "callers": [],
        "callees": [
            "EXTERNAL::agent_supervisor.supervisor.invoke",
            "EXTERNAL::langchain.schema.HumanMessage",
            "EXTERNAL::streamlit.append",
            "EXTERNAL::streamlit.append",
            "EXTERNAL::streamlit.image",
            "EXTERNAL::streamlit.info",
            "EXTERNAL::streamlit.markdown",
            "EXTERNAL::streamlit.markdown",
            "EXTERNAL::streamlit.markdown",
            "EXTERNAL::streamlit.markdown",
            "EXTERNAL::streamlit.markdown",
            "EXTERNAL::streamlit.set_page_config",
            "EXTERNAL::streamlit.title",
            "EXTERNAL::streamlit.write"
        ],
        "file_name": "/workspace/chat_bot.py"
    },
    "file2::(global)": {
        "uid": "node_e256bb11",
        "name": "file2::(global)",
        "content": "",
        "callers": [],
        "callees": [
            "file2::summarize_repo"
        ],
        "file_name": "/workspace/tools/file2.py"
    },
    "file2::summarize_repo": {
        "uid": "node_ff6ed791",
        "name": "file2::summarize_repo",
        "content": "\n\ndef summarize_repo():\n    summary = '\\n    \ud83d\udcd8 Repo: docAider\\n\\n    docAider is a multi-agent system that automates code documentation\\n    using Semantic Kernel and Autogen. It generates, reviews, and updates\\n    documentation for repositories through orchestrated agents.\\n\\n    Key Features:\\n    - Automates initial documentation generation.\\n    - Multi-agent workflow:\\n        \u2022 CodeContextAgent \u2192 explains code.\\n        \u2022 DocumentationGenerationAgent \u2192 writes docs.\\n        \u2022 ReviewAgent \u2192 improves docs.\\n        \u2022 AgentManager \u2192 orchestrates the workflow.\\n    - Produces outputs like docs, prompts, call graphs, and flow diagrams.\\n    - Supports GitHub Actions workflows for continuous documentation updates.\\n    - Helps untangle complex code, find unused functions, and onboard developers faster.\\n\\n    Usage:\\n    - Run via Docker (`docker compose up --build`).\\n    - Generate documentation (`docker exec docAider python3 /docAider/repo_documentation/multi_agent_app.py`).\\n    - Set up workflows (`docker exec docAider python3 /docAider/setup_workflows.py`).\\n    - Workflows:\\n        \u2022 update-docs.yml \u2192 auto-updates docs on PRs.\\n        \u2022 update-comments.yml \u2192 lets users request doc changes via comments.\\n    '\n    print(summary)\n",
        "callers": [
            "file2::(global)"
        ],
        "callees": [
            "EXTERNAL::print"
        ],
        "file_name": "/workspace/tools/file2.py"
    },
    "file::(global)": {
        "uid": "node_616592f3",
        "name": "file::(global)",
        "content": "",
        "callers": [],
        "callees": [
            "file::print_repoagent_summary"
        ],
        "file_name": "/workspace/tools/file.py"
    },
    "file::print_repoagent_summary": {
        "uid": "node_f79a98ca",
        "name": "file::print_repoagent_summary",
        "content": "\n\ndef print_repoagent_summary():\n    summary = {'Classes': {'GitHubFile': 'Holds GitHub file information (content, path, URL).', 'RepositoryInfo': 'Holds repository info (name, URL, contents).', 'RepoAgent': 'Specialized agent for GitHub repos. Supports FULL_CONTEXT & RAG modes.'}, 'Key Methods': {'__init__': 'Initialize RepoAgent with retriever, model, repos, etc.', 'parse_url': 'Parse GitHub URL \u2192 (owner, repo_name).', 'load_repositories': 'Load contents of multiple repos.', 'load_repository': 'Load a single repo using GitHub client.', 'count_tokens': 'Return number of tokens.', 'construct_full_text': 'Concatenate repos into full context text.', 'add_repositories': 'Add new repo(s) to context.', 'check_switch_mode': 'Check if switching to RAG mode is needed.', 'step': 'Retrieve context + pass input to model.', 'reset': 'Reset agent state.', 'search_by_file_path': 'Search and reconstruct file contents by path.'}}\n    print('\\n=== RepoAgent Summary ===\\n')\n    print('Classes:')\n    for (cls, desc) in summary['Classes'].items():\n        print(f'- {cls}: {desc}')\n    print('\\nMethods:')\n    for (method, desc) in summary['Key Methods'].items():\n        print(f'- {method}(): {desc}')\n",
        "callers": [
            "file::(global)"
        ],
        "callees": [
            "EXTERNAL::print",
            "EXTERNAL::print",
            "EXTERNAL::print",
            "EXTERNAL::print",
            "EXTERNAL::print"
        ],
        "file_name": "/workspace/tools/file.py"
    },
    "log_status::(global)": {
        "uid": "node_dc48f012",
        "name": "log_status::(global)",
        "content": "",
        "callers": [],
        "callees": [
            "EXTERNAL::langchain_core.tools.Tool"
        ],
        "file_name": "/workspace/tools/log_status.py"
    },
    "log_status::update_txt_status": {
        "uid": "node_f4bab328",
        "name": "log_status::update_txt_status",
        "content": "\n\ndef update_txt_status(option: str):\n    option = option.lower().strip()\n    if (option not in allowed_status):\n        return f\"Invalid status option. Please choose one of: {', '.join(allowed_status)}\"\n    timestamp = datetime.now().strftime('%D %I:%M:%S %p')\n    entry = f'''[{timestamp}] STATUS: {option.title()}\n'''\n    try:\n        with open('logs\\\\status_logs.txt', 'a', encoding='utf-8') as f:\n            f.write(entry)\n        return f\"\u2705 Status '{option.title()}' logged at {timestamp}.\"\n    except Exception as e:\n        return str(f'Failed to log status: {e}')\n",
        "callers": [],
        "callees": [
            "EXTERNAL::datetime.datetime.now",
            "EXTERNAL::open",
            "EXTERNAL::str"
        ],
        "file_name": "/workspace/tools/log_status.py"
    },
    "mail_reader::(global)": {
        "uid": "node_12683225",
        "name": "mail_reader::(global)",
        "content": "",
        "callers": [],
        "callees": [
            "EXTERNAL::langchain_core.tools.Tool"
        ],
        "file_name": "/workspace/tools/mail_reader.py"
    },
    "mail_reader::get_recent_emails": {
        "uid": "node_3e251ea9",
        "name": "mail_reader::get_recent_emails",
        "content": "\n\ndef get_recent_emails(query: str='') -> str:\n    try:\n        q = query.lower()\n        sender_filter = None\n        today_only = False\n        count_mode = False\n        match_sender = re.search('(?:from|by|did)\\\\s+([\\\\w\\\\s.@<>\\\\\"\\']+)', q)\n        if match_sender:\n            sender_filter = match_sender.group(1).strip()\n        if ('today' in q):\n            today_only = True\n        if ('how many' in q):\n            count_mode = True\n        elif ('did' in q):\n            count_mode = 'boolean'\n        limit = (1 if count_mode else 5)\n        match_limit = re.search('(\\\\d+)', q)\n        if (match_limit and (not count_mode)):\n            limit = int(match_limit.group(1))\n        emails = parse_mail_log(limit=None)\n        today = datetime.now().date()\n        filtered = []\n        for email in emails:\n            sender = email.get('From', '').lower()\n            date_str = email.get('Date', '')\n            try:\n                mail_date = dateparser.parse(date_str).date()\n            except Exception:\n                continue\n            if (sender_filter and (sender_filter.lower() not in sender)):\n                continue\n            if (today_only and (mail_date != today)):\n                continue\n            filtered.append(email)\n        if (count_mode == True):\n            return f\"{len(filtered)} email(s) from {(sender_filter or 'the sender')} today.\"\n        if (count_mode == 'boolean'):\n            return (f'Yes, {sender_filter} sent you email(s) today.' if filtered else f'No, nothing from {sender_filter} today.')\n        if (not filtered):\n            return 'No matching emails found.'\n        output = []\n        for (i, email) in enumerate(filtered[(- limit):], 1):\n            output.append(f'''Email {i}:\nSubject: {email.get('Subject', '[Missing]')}\nFrom: {email.get('From', '[Missing]')}\nDate: {email.get('Date', '[Missing]')}\nBody:\n{email.get('Body', '[No Body]')}\n''')\n        return '\\n'.join(output)\n    except Exception as e:\n        return f'Failed to parse email log: {e}'\n",
        "callers": [],
        "callees": [
            "EXTERNAL::datetime.datetime.now",
            "EXTERNAL::dateutil.parser.parse",
            "EXTERNAL::enumerate",
            "EXTERNAL::int",
            "EXTERNAL::len",
            "EXTERNAL::re.search",
            "EXTERNAL::re.search",
            "mail_reader::parse_mail_log"
        ],
        "file_name": "/workspace/tools/mail_reader.py"
    },
    "mail_reader::parse_mail_log": {
        "uid": "node_06f626ba",
        "name": "mail_reader::parse_mail_log",
        "content": "\n\ndef parse_mail_log(filepath='logs/mail_logs.txt', limit=None):\n    with open(filepath, 'r', encoding='utf-8') as f:\n        lines = f.readlines()\n    emails = []\n    current = {}\n    body_lines = []\n    collecting_body = False\n    for line in lines:\n        line = line.strip()\n        if ('Subject:' in line):\n            if (current and ('Subject' in current)):\n                current['Body'] = '\\n'.join(body_lines)\n                emails.append(current)\n            current = {}\n            body_lines = []\n            collecting_body = False\n            current['Subject'] = line.split('Subject:')[1].strip()\n        elif ('From:' in line):\n            current['From'] = line.split('From:')[1].strip()\n        elif ('Date:' in line):\n            current['Date'] = line.split('Date:')[1].strip()\n        elif ('Body:' in line):\n            collecting_body = True\n        elif ('--------------------------------------------------' in line):\n            collecting_body = False\n            current['Body'] = '\\n'.join(body_lines)\n            emails.append(current)\n            current = {}\n            body_lines = []\n        elif collecting_body:\n            body_lines.append(line.split(']')[(- 1)].strip())\n    if (current and ('Subject' in current)):\n        current['Body'] = '\\n'.join(body_lines)\n        emails.append(current)\n    return (emails[(- limit):] if limit else emails)\n",
        "callers": [
            "mail_reader::get_recent_emails"
        ],
        "callees": [
            "EXTERNAL::open"
        ],
        "file_name": "/workspace/tools/mail_reader.py"
    },
    "mail_saver::(global)": {
        "uid": "node_d9b17047",
        "name": "mail_saver::(global)",
        "content": "",
        "callers": [],
        "callees": [
            "EXTERNAL::dotenv.load_dotenv",
            "EXTERNAL::langchain_core.tools.Tool"
        ],
        "file_name": "/workspace/tools/mail_saver.py"
    },
    "mail_saver::fetch_and_log_emails": {
        "uid": "node_4ae0a1ef",
        "name": "mail_saver::fetch_and_log_emails",
        "content": "\n\ndef fetch_and_log_emails(query: str='') -> str:\n    username = os.getenv('MAIL_ID')\n    password = os.getenv('MAIL_PW')\n    imap_host = 'imap.mail.yahoo.com'\n    try:\n        days = 7\n        match = re.search('\\\\d+', query)\n        if match:\n            days = int(match.group(0))\n        with open(LOG_FILE, 'w', encoding='utf-8') as f:\n            f.write('')\n        since_date = (datetime.datetime.now() - datetime.timedelta(days=days)).strftime('%d-%b-%Y')\n        imap = imaplib.IMAP4_SSL(imap_host)\n        imap.login(username, password)\n        imap.select('INBOX')\n        (status, messages) = imap.search(None, f'SINCE {since_date}')\n        if (status != 'OK'):\n            return 'Failed to search emails.'\n        email_ids = messages[0].split()\n        if (not email_ids):\n            return f'No emails found from the past {days} day(s).'\n        for eid in email_ids:\n            (_, msg_data) = imap.fetch(eid, '(RFC822)')\n            for response_part in msg_data:\n                if isinstance(response_part, tuple):\n                    msg = email.message_from_bytes(response_part[1])\n                    (subject, encoding) = decode_header(msg.get('Subject', 'No Subject'))[0]\n                    if isinstance(subject, bytes):\n                        subject = subject.decode((encoding or 'utf-8'), errors='ignore')\n                    (from_, encoding) = decode_header(msg.get('From', 'Unknown Sender'))[0]\n                    if isinstance(from_, bytes):\n                        from_ = from_.decode((encoding or 'utf-8'), errors='ignore')\n                    date = msg.get('Date', 'Unknown Date')\n                    log_to_file(f'Subject: {subject}')\n                    log_to_file(f'From: {from_}')\n                    log_to_file(f'Date: {date}')\n                    log_to_file('Body:')\n                    body = ''\n                    if msg.is_multipart():\n                        for part in msg.walk():\n                            if ((part.get_content_type() == 'text/plain') and (not part.get('Content-Disposition'))):\n                                try:\n                                    body = part.get_payload(decode=True).decode((part.get_content_charset() or 'utf-8'), errors='ignore')\n                                    break\n                                except:\n                                    continue\n                    else:\n                        payload = msg.get_payload(decode=True)\n                        if payload:\n                            try:\n                                body = payload.decode((msg.get_content_charset() or 'utf-8'), errors='ignore')\n                            except:\n                                body = str(payload)\n                    for line in body.strip().splitlines():\n                        log_to_file(line.strip())\n                    log_to_file(('-' * 50))\n        imap.logout()\n        return f'Logged {len(email_ids)} emails from the past {days} day(s).'\n    except Exception as e:\n        return f'Error: {str(e)}'\n",
        "callers": [],
        "callees": [
            "EXTERNAL::datetime.now",
            "EXTERNAL::datetime.timedelta",
            "EXTERNAL::email.header.decode_header",
            "EXTERNAL::email.header.decode_header",
            "EXTERNAL::email.message_from_bytes",
            "EXTERNAL::imaplib.IMAP4_SSL",
            "EXTERNAL::int",
            "EXTERNAL::isinstance",
            "EXTERNAL::isinstance",
            "EXTERNAL::isinstance",
            "EXTERNAL::len",
            "EXTERNAL::open",
            "EXTERNAL::os.getenv",
            "EXTERNAL::os.getenv",
            "EXTERNAL::re.search",
            "EXTERNAL::str",
            "EXTERNAL::str",
            "mail_saver::log_to_file",
            "mail_saver::log_to_file",
            "mail_saver::log_to_file",
            "mail_saver::log_to_file",
            "mail_saver::log_to_file",
            "mail_saver::log_to_file"
        ],
        "file_name": "/workspace/tools/mail_saver.py"
    },
    "mail_saver::log_to_file": {
        "uid": "node_7bf9b0ea",
        "name": "mail_saver::log_to_file",
        "content": "\n\ndef log_to_file(msg):\n    timestamp = datetime.datetime.now().strftime('[%Y-%m-%d %H:%M:%S]')\n    line = f'{timestamp} {msg}'\n    with open(LOG_FILE, 'a', encoding='utf-8') as f:\n        f.write((line + '\\n'))\n",
        "callers": [
            "mail_saver::fetch_and_log_emails"
        ],
        "callees": [
            "EXTERNAL::datetime.now",
            "EXTERNAL::open"
        ],
        "file_name": "/workspace/tools/mail_saver.py"
    },
    "monitor::(global)": {
        "uid": "node_572501f5",
        "name": "monitor::(global)",
        "content": "",
        "callers": [],
        "callees": [
            "EXTERNAL::<Call owner_token=None token=Client>.create",
            "EXTERNAL::dotenv.load_dotenv",
            "EXTERNAL::json.load",
            "EXTERNAL::os.getenv",
            "EXTERNAL::os.getenv",
            "EXTERNAL::os.getenv",
            "EXTERNAL::os.getenv",
            "EXTERNAL::os.getenv",
            "EXTERNAL::os.getenv",
            "EXTERNAL::print",
            "EXTERNAL::print",
            "EXTERNAL::print",
            "EXTERNAL::set",
            "EXTERNAL::time.sleep",
            "EXTERNAL::twilio.rest.Client",
            "monitor::fetch_unread_from_senders"
        ],
        "file_name": "/workspace/monitor.py"
    },
    "monitor::fetch_unread_from_senders": {
        "uid": "node_44f5060b",
        "name": "monitor::fetch_unread_from_senders",
        "content": "\n\ndef fetch_unread_from_senders(senders: set):\n    try:\n        mail = imaplib.IMAP4_SSL(IMAP_SERVER)\n        mail.login(EMAIL, PASSWORD)\n        mail.select('inbox')\n        (status, messages) = mail.search(None, '(UNSEEN)')\n        if (status != 'OK'):\n            return []\n        unread_ids = messages[0].split()\n        matched = []\n        for uid in unread_ids:\n            (res, msg_data) = mail.fetch(uid, '(RFC822)')\n            if (res != 'OK'):\n                continue\n            msg = email.message_from_bytes(msg_data[0][1])\n            from_header = email.utils.parseaddr(msg['From'])[1]\n            if (from_header in senders):\n                matched.append(from_header)\n        mail.logout()\n        return matched\n    except Exception as e:\n        print(f'\u274c Error during email check: {e}')\n        return []\n",
        "callers": [
            "monitor::(global)"
        ],
        "callees": [
            "EXTERNAL::email.message_from_bytes",
            "EXTERNAL::email.parseaddr",
            "EXTERNAL::imaplib.IMAP4_SSL",
            "EXTERNAL::print"
        ],
        "file_name": "/workspace/monitor.py"
    },
    "repo_scanner::(global)": {
        "uid": "node_6d8c4459",
        "name": "repo_scanner::(global)",
        "content": "",
        "callers": [],
        "callees": [
            "EXTERNAL::<Call owner_token=None token=OpenAIEmbedding>.get_output_dim",
            "EXTERNAL::<Call owner_token=None token=RepoAgent>.count_tokens",
            "EXTERNAL::<Call owner_token=None token=RepoAgent>.load_repositories",
            "EXTERNAL::<Call owner_token=None token=RepoAgent>.step",
            "EXTERNAL::camel.agents.repo_agent.RepoAgent",
            "EXTERNAL::camel.embeddings.OpenAIEmbedding",
            "EXTERNAL::camel.models.ModelFactory.create",
            "EXTERNAL::camel.retrievers.VectorRetriever",
            "EXTERNAL::camel.storages.vectordb_storages.QdrantStorage",
            "EXTERNAL::dotenv.load_dotenv",
            "EXTERNAL::os.dirname",
            "EXTERNAL::os.getenv",
            "EXTERNAL::os.getenv",
            "EXTERNAL::os.join",
            "EXTERNAL::print",
            "EXTERNAL::print",
            "EXTERNAL::print"
        ],
        "file_name": "/workspace/scanner/repo_scanner.py"
    },
    "save_txt::(global)": {
        "uid": "node_584f5460",
        "name": "save_txt::(global)",
        "content": "",
        "callers": [],
        "callees": [
            "EXTERNAL::langchain_core.tools.Tool"
        ],
        "file_name": "/workspace/tools/save_txt.py"
    },
    "save_txt::save_to_txt": {
        "uid": "node_086c64cd",
        "name": "save_txt::save_to_txt",
        "content": "\n\ndef save_to_txt(data: str, filename: str='logs\\\\saved_logs.txt'):\n    timestamp = datetime.now().strftime('%D %H:%M:%S')\n    formatted_text = f'''------Research Output-------\n{timestamp}\n\n{data}\n\n'''\n    with open(filename, 'a', encoding='utf-8') as f:\n        f.write(formatted_text)\n    return f'Data successfully saved to {filename}'\n",
        "callers": [],
        "callees": [
            "EXTERNAL::datetime.datetime.now",
            "EXTERNAL::open"
        ],
        "file_name": "/workspace/tools/save_txt.py"
    },
    "search_tools::(global)": {
        "uid": "node_a6f04154",
        "name": "search_tools::(global)",
        "content": "",
        "callers": [],
        "callees": [
            "EXTERNAL::langchain.tools.Tool",
            "EXTERNAL::langchain.tools.Tool",
            "EXTERNAL::langchain.tools.Tool",
            "EXTERNAL::langchain_community.tools.ArxivQueryRun",
            "EXTERNAL::langchain_community.tools.DuckDuckGoSearchRun",
            "EXTERNAL::langchain_community.tools.WikipediaQueryRun",
            "EXTERNAL::langchain_community.utilities.ArxivAPIWrapper",
            "EXTERNAL::langchain_community.utilities.WikipediaAPIWrapper"
        ],
        "file_name": "/workspace/tools/search_tools.py"
    },
    "time_tool::(global)": {
        "uid": "node_f97854e8",
        "name": "time_tool::(global)",
        "content": "",
        "callers": [],
        "callees": [
            "EXTERNAL::langchain_core.tools.Tool",
            "EXTERNAL::print",
            "time_tool::get_current_datetime"
        ],
        "file_name": "/workspace/tools/time_tool.py"
    },
    "time_tool::get_current_datetime": {
        "uid": "node_99fc526c",
        "name": "time_tool::get_current_datetime",
        "content": "\n\ndef get_current_datetime(query: str='') -> str:\n    timezones = {'pst': 'US/Pacific', 'cst': 'US/Central', 'est': 'US/Eastern', 'mst': 'US/Mountain', 'ist': 'Asia/Kolkata', 'gmt': 'Etc/GMT', 'utc': 'UTC', 'jst': 'Asia/Tokyo', 'cet': 'Europe/Paris', 'bst': 'Europe/London'}\n    local_tz = get_localzone()\n    local_now = datetime.now(local_tz)\n    default_msg = local_now.strftime(f'''Local Timezone: {str(local_tz)}\n %A, %d %B %Y\n %I:%M:%S %p''')\n    query = query.lower()\n    for (key, tz) in timezones.items():\n        if (key in query):\n            target_tz = pytz.timezone(tz)\n            target_time = datetime.now(target_tz)\n            return target_time.strftime(f'''Timezone: {tz}\n %A, %d %B %Y\n %I:%M:%S %p''')\n    return default_msg\n",
        "callers": [
            "time_tool::(global)"
        ],
        "callees": [
            "EXTERNAL::datetime.datetime.now",
            "EXTERNAL::datetime.datetime.now",
            "EXTERNAL::pytz.timezone",
            "EXTERNAL::str",
            "EXTERNAL::tzlocal.get_localzone"
        ],
        "file_name": "/workspace/tools/time_tool.py"
    },
    "timer::(global)": {
        "uid": "node_35a44175",
        "name": "timer::(global)",
        "content": "",
        "callers": [],
        "callees": [
            "EXTERNAL::langchain_core.tools.Tool"
        ],
        "file_name": "/workspace/tools/timer.py"
    },
    "timer::set_timer": {
        "uid": "node_5c5a0344",
        "name": "timer::set_timer",
        "content": "\n\ndef set_timer(user_input: str):\n    match = re.search('(\\\\d+\\\\.?\\\\d*)', user_input)\n    if (not match):\n        return 'Please specify timer duration in minutes'\n    minutes = float(match.group(1))\n    seconds = int((minutes * 60))\n    thread = Thread(target=timer_thread, args=(seconds, 'Timer is Up!'))\n    thread.daemon = False\n    thread.start()\n    return f'Timer is set up for {minutes} minute(s).'\n",
        "callers": [],
        "callees": [
            "EXTERNAL::float",
            "EXTERNAL::int",
            "EXTERNAL::re.search",
            "EXTERNAL::threading.Thread"
        ],
        "file_name": "/workspace/tools/timer.py"
    },
    "timer::timer_thread": {
        "uid": "node_5fea8c39",
        "name": "timer::timer_thread",
        "content": "\n\ndef timer_thread(seconds, message):\n    time.sleep(seconds)\n    notification.notify(title='Timer Finished', message=message, timeout=10)\n",
        "callers": [],
        "callees": [
            "EXTERNAL::plyer.notification.notify",
            "EXTERNAL::time.sleep"
        ],
        "file_name": "/workspace/tools/timer.py"
    }
}